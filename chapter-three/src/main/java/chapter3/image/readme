Chapter 3. Lambda expressions


For now you can think of lambda expressions as anonymous functions, basically methods without declared names,
but which can also be passed as arguments to a method as you can with an anonymous class.

A lambda expression can be understood as a concise representation of an anonymous function that can be passed around:


Anonymous— We say anonymous because it doesn’t have an explicit name like a method would normally have: less to write and think about!

Function— We say function because a lambda isn’t associated with a particular class like a method is.
But like a method, a lambda has a list of parameters, a body, a return type, and a possible list of exceptions that can be thrown.

Passed around— A lambda expression can be passed as argument to a method or stored in a variable.

Concise— You don’t need to write a lot of boilerplate like you do for anonymous classes.

